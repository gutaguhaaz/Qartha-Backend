Qartha Inventory API
Overview Sistema de gesti√≥n de inventario de activos basado en FastAPI, dise√±ado para funcionar como un Content Management System (CMS). Utiliza c√≥digos QR din√°micos para la gesti√≥n de equipos de red y el registro de escaneos para auditor√≠a. La arquitectura es flexible para crecer desde un solo sitio a m√∫ltiples ubicaciones.

Project Architecture
Framework: FastAPI (versi√≥n 0.115.2)
Database: MongoDB Atlas (a trav√©s del driver as√≠ncrono Motor)
Server: Uvicorn con auto-reload
Templating: Jinja2 para las p√°ginas HTML de colecci√≥n
QR Integration: QR Tiger API (implementaci√≥n real con fallback)
HTTP Client: httpx para llamadas a APIs externas
Port: 5000 (obligatorio para el proxy de Replit)

Implemented Features ‚úÖ
Gesti√≥n de Dispositivos (CMS):
Device Management: API completa (CRUD) para la gesti√≥n de dispositivos.
Content Management: Modelos de datos y endpoints para adjuntar im√°genes, diagramas y tablas a cada dispositivo.
Generaci√≥n de C√≥digos QR:
Real Integration: Integraci√≥n con la API de QR Tiger, con un robusto mecanismo de fallback que genera un URL local en caso de problemas de conectividad de red.
Seguimiento y Registro:
Geolocation Tracking: P√°ginas HTML con JavaScript para capturar la geolocalizaci√≥n. La geolocalizaci√≥n en los dispositivos es opcional para simplificar la implementaci√≥n inicial.
Scan Recording: Endpoint POST para registrar cada escaneo con informaci√≥n de IP y User-Agent.
Configuraci√≥n y Despliegue:
CORS Configuration: Soporte para solicitudes de origen cruzado.
Error Handling: Sistema de fallback robusto para la generaci√≥n de QR y manejo de errores.
Health Checks: Endpoints de estado y salud.

Backend API Status
Core Endpoints (‚úÖ Implemented)
GET /: Verificaci√≥n del estado de la API.
GET /health: Endpoint de chequeo de salud.
POST /api/devices: Crear un nuevo dispositivo.
GET /api/devices/{id}: Obtener los detalles de un dispositivo.
PUT /api/devices/{id}: Actualizar la informaci√≥n de un dispositivo.
POST /api/devices/{id}/qr: Generar QR con integraci√≥n de QR Tiger.
GET /collect/{device_id}: P√°gina HTML para la recolecci√≥n de activos.
POST /api/scans: Registrar un escaneo de ubicaci√≥n.
GET /api/scans?device_id=...: Listar los escaneos de un dispositivo.
POST /api/files: Cargar archivos (im√°genes, PDFs) y adjuntarlos a un dispositivo.
GET /api/files/{file_id}: Servir un archivo subido.
POST /api/auth/login: Autenticaci√≥n de usuarios administradores.
POST /api/auth/register: Registro de nuevos usuarios.

What's Missing / Next Steps üìã
Frontend Integration:
Desarrollar un frontend en Angular/React para la gesti√≥n de dispositivos.
Crear una UI para subir archivos y asociarlos a los dispositivos.
Dise√±ar el dashboard de inventario y la visualizaci√≥n del historial de escaneos.
Enhanced Features:
Funcionalidad de importaci√≥n/exportaci√≥n de dispositivos en lote.
Anal√≠ticas avanzadas de escaneos.
Auditor√≠a de cambios y gesti√≥n de usuarios m√°s detallada.
Production Readiness:
Implementar limitaci√≥n de tasa (rate limiting).
Mejorar la validaci√≥n de solicitudes.
Configurar un sistema de logging y monitoreo.
Generar documentaci√≥n de la API con Swagger.



Esto ser√≠a un demo funcional listo para mostrar la idea de inventario inteligente con QR f√≠sicos y notificaciones.