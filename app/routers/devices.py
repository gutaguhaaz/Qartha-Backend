from fastapi import APIRouter, HTTPException
from bson import ObjectId
from datetime import datetime
from typing import List, Optional

from ..db import get_db
from ..models import DeviceIn, DeviceOut
from ..services.qr_tiger import create_dynamic_url_qr
from ..config import settings

router = APIRouter(prefix="/api/devices", tags=["devices"])

def _to_out(d: dict) -> DeviceOut:
    d_out = d.copy()
    d_out["id"] = str(d_out.pop("_id"))
    return DeviceOut(**d_out)

@router.post("", response_model=DeviceOut)
async def create_device(payload: DeviceIn):
    db = get_db()
    doc = payload.model_dump()
    now = datetime.utcnow()
    doc.update({"created_at": now, "updated_at": now, "qr_url": None, "qr_image_url": None})
    res = await db.devices.insert_one(doc)
    saved = await db.devices.find_one({"_id": res.inserted_id})
    return _to_out(saved)

@router.get("/{device_id}", response_model=DeviceOut)
async def get_device(device_id: str):
    db = get_db()
    try:
        obj_id = ObjectId(device_id)
    except Exception:
        raise HTTPException(404, "Invalid device id")
    doc = await db.devices.find_one({"_id": obj_id})
    if not doc:
        raise HTTPException(404, "Device not found")
    return _to_out(doc)

@router.put("/{device_id}", response_model=DeviceOut)
async def update_device(device_id: str, payload: DeviceIn):
    db = get_db()
    try:
        obj_id = ObjectId(device_id)
    except Exception:
        raise HTTPException(404, "Invalid device id")
    now = datetime.utcnow()
    await db.devices.update_one({"_id": obj_id}, {"$set": {**payload.model_dump(), "updated_at": now}})
    doc = await db.devices.find_one({"_id": obj_id})
    if not doc:
        raise HTTPException(404, "Device not found")
    return _to_out(doc)

@router.post("/{device_id}/qr", response_model=DeviceOut)
async def generate_qr_for_device(device_id: str):
    """Create/refresh a dynamic QR pointing to our collector URL.
    The QR itself is generated by QR TIGER (optional). If no API key is set,
    this endpoint will just save the collector URL to 'qr_url' so you can still test.
    """
    db = get_db()
    try:
        obj_id = ObjectId(device_id)
    except Exception:
        raise HTTPException(404, "Invalid device id")

    doc = await db.devices.find_one({"_id": obj_id})
    if not doc:
        raise HTTPException(404, "Device not found")

    collector = f"{settings.BACKEND_BASE_URL.rstrip('/')}/collect/{device_id}"
    qr_data = {}
    try:
        qr_data = await create_dynamic_url_qr(collector, title=doc.get('name'))
    except NotImplementedError:
        qr_data = {}
    update = {
        "qr_url": qr_data.get("qr_url", collector),  # fallback to collector itself
        "qr_image_url": qr_data.get("qr_image_url")
    }
    await db.devices.update_one({"_id": obj_id}, {"$set": update})
    doc = await db.devices.find_one({"_id": obj_id})
    return _to_out(doc)
